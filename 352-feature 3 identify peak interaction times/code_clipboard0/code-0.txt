defmodule Twitter do
  def peak_interaction_times(interaction, hours) do
    sums = Arrays.empty 
    curr_sum = 0

    sums = 
      interaction
      |> Enum.with_index
      |> Enum.reduce({sums, curr_sum}, fn({x, i}, {sums, curr_sum}) ->
        curr_sum = curr_sum + x
        curr_sum = if i >= hours, do: curr_sum - interaction[i - hours], else: curr_sum
        sums = if i >= hours - 1, do: Arrays.append(sums, curr_sum), else: sums
        {sums, curr_sum}
      end)
      |> elem(0)

    left = List.duplicate(0, Arrays.size(sums)) |> Arrays.new
    best = 0

    left = 
      0..Arrays.size(sums)-1
      |> Enum.reduce({left, best}, fn(i, {left, best}) ->
        best = if sums[i] > sums[best], do: i, else: best 
        left = Arrays.replace(left, i, best)
        {left, best}
      end)
      |> elem(0)

    right = List.duplicate(0, Arrays.size(sums)) |> Arrays.new
    best = Arrays.size(sums) - 1

    right = 
      best..0
      |> Enum.reduce({right, best}, fn(i, {right, best}) ->
        best = if sums[i] >= sums[best], do: i, else: best 
        right = Arrays.replace(right, i, best)
        {right, best}
      end)
      |> elem(0)

    hours..best-hours
    |> Enum.reduce(Arrays.new([-1, -1, -1]), fn(j, output) ->
      i = left[j - hours]
      l = right[j + hours]
      cond do
        output[0] == -1 or sums[i] + sums[j] + sums[l] > sums[output[0]] + sums[output[1]] + sums[output[2]] ->
          Arrays.new([i, j, l])
        true -> output
      end
    end)
    |> Arrays.to_list
  end
end

# Driver code
IO.puts "-----------------------------"
IO.puts "PROGRAM OUTPUT:"

interaction = Arrays.new([0, 2, 1, 3, 1, 7, 11, 5, 5])
hours = 2
IO.inspect Twitter.peak_interaction_times(interaction, hours) 