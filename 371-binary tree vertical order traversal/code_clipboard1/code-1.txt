defmodule BinaryTree do
    alias Okasaki.Deque, as: Deque

    def vertical_order(nil), do: []
    def vertical_order(root) do
        node_list = %{}
        min_column = 0
        max_index = 0
        queue = Deque.new([{root, 0}])

        bfs(queue, node_list, max_index, min_column)
    end

    def bfs(queue, node_list, max_index, min_column) do
        cond do
            Deque.size(queue) <= 0 ->
                min_column..max_index 
                |> Enum.map(fn x -> node_list[x] end)
            true ->
                {:ok, {{node, column}, queue}} = Deque.remove_left(queue)
                cond do
                    node != nil ->
                        temp = Map.get(node_list, column, Arrays.empty())
                        temp = temp |> Arrays.append(node.val)
                        node_list = Map.put(node_list, column, temp)
                        min_column = min(min_column, column)
                        max_index = max(max_index, column)

                        queue = queue |> Deque.insert_right({node.left, column-1})
                        queue = queue |> Deque.insert_right({node.right, column+1})
                        bfs(queue, node_list, max_index, min_column)

                    true -> bfs(queue, node_list, max_index, min_column)
                end
        end
    end
end

# Driver Code
defmodule Main do
    def main do
        IO.puts "-----------------------------"
        IO.puts "PROGRAM OUTPUT:"

        root = TreeNode.init(-10)
        root = %TreeNode{root | left: TreeNode.init(9)}
        root = %TreeNode{root | right: TreeNode.init(20)}
        root = %TreeNode{root | right: %TreeNode{root.right | left: TreeNode.init(15)}}
        root = %TreeNode{root | right: %TreeNode{root.right | right: TreeNode.init(7)}}

        root1 = TreeNode.init(-8)
        root1 = %TreeNode{root1 | left: TreeNode.init(2)}
        root1 = %TreeNode{root1 | right: TreeNode.init(17)}
        root1 = %TreeNode{root1 | left: %TreeNode{root1.left | left: TreeNode.init(1)}}
        root1 = %TreeNode{root1 | left: %TreeNode{root1.left | right: TreeNode.init(4)}}
        root1 = %TreeNode{root1 | right: %TreeNode{root1.right | left: TreeNode.init(19)}}
        root1 = %TreeNode{root1 | right: %TreeNode{root1.right | right: TreeNode.init(5)}}

        root2 = TreeNode.init(7)
        root2 = %TreeNode{root2 | left: TreeNode.init(3)}
        root2 = %TreeNode{root2 | right: TreeNode.init(4)}
        root2 = %TreeNode{root2 | right: %TreeNode{root2.right | left: TreeNode.init(-1)}}
        root2 = %TreeNode{root2 | right: %TreeNode{root2.right | right: TreeNode.init(-3)}}

        output = BinaryTree.vertical_order(root) |> Helper.convert
        output2 = BinaryTree.vertical_order(root1) |> Helper.convert
        output3 = BinaryTree.vertical_order(root2) |> Helper.convert

        IO.inspect(output, charlists: :as_lists)
        IO.inspect(output2, charlists: :as_lists)
        IO.inspect(output3, charlists: :as_lists)
    end
end

Main.main