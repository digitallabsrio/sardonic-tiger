defmodule MedianOfAges do
  defstruct max_heap: Heap.new(), min_heap: Heap.new()
  def init, do: %__MODULE__{}

  def insert_age(obj, num) do    
    obj =
      cond do
        Heap.size(obj.max_heap) == 0 or -Heap.root(obj.max_heap) >= num ->
          %__MODULE__{obj | max_heap: obj.max_heap |> Heap.push(-num)}
  
        true ->
          %__MODULE__{obj | min_heap: obj.min_heap |> Heap.push(num)}
      end

    cond do
      Heap.size(obj.max_heap) > Heap.size(obj.min_heap) + 1 ->
        max = obj.max_heap |> Heap.root
        %__MODULE__{obj | max_heap: obj.max_heap |> Heap.pop, min_heap: obj.min_heap |> Heap.push(-max)}
  
      Heap.size(obj.max_heap) < Heap.size(obj.min_heap) ->
        min = obj.min_heap |> Heap.root
        %__MODULE__{obj | min_heap: obj.min_heap |> Heap.pop, max_heap: obj.max_heap |> Heap.push(-min)}

      true -> obj
    end
  end

  def find_median(obj) do
    cond do
      Heap.size(obj.max_heap) == Heap.size(obj.min_heap) ->
        # we have even number of elements, take the average of middle two elements
        -Heap.root(obj.max_heap) / 2.0 + Heap.root(obj.min_heap) / 2.0
  
      true ->
        # because max-heap will have one more element than the min-heap
        -Heap.root(obj.max_heap) / 1.0
    end
  end
end

# Driver code
IO.puts "-----------------------------"
IO.puts "PROGRAM OUTPUT:"

median_age = MedianOfAges.init
median_age = 
  median_age 
  |> MedianOfAges.insert_age(22)
  |> MedianOfAges.insert_age(35)

IO.puts "The recommended content will be for ages under: #{MedianOfAges.find_median(median_age)}"
median_age = median_age |> MedianOfAges.insert_age(30)
IO.puts "The recommended content will be for ages under: #{MedianOfAges.find_median(median_age)}"
median_age = median_age |> MedianOfAges.insert_age(25)
IO.puts "The recommended content will be for ages under: #{MedianOfAges.find_median(median_age)}"