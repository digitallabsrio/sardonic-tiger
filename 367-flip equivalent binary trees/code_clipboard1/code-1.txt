defmodule Trees do
  def flip_equiv(root1, root2) do
    cond do
      root1 == nil and root2 == nil -> true
      !root1 or !root2 or root1.val != root2.val -> false
      true ->
        flip_equiv(root1.left, root2.left) and flip_equiv(root1.right, root2.right) or flip_equiv(root1.left, root2.right) and flip_equiv(root1.right, root2.left)
    end
  end
end

# Driver Code
defmodule Main do
  def main do
    IO.puts "-----------------------------"
    IO.puts "PROGRAM OUTPUT:"

    # Example 1
    IO.inspect Trees.flip_equiv(nil, nil)

    # Example 2
    root1 = TreeNode.init(1)
    root1 = %TreeNode{root1 | right: TreeNode.init(3)}
    root1 = %TreeNode{root1 | left: TreeNode.init(2)}
    root1 = %TreeNode{root1 | right: %TreeNode{root1.right | left: TreeNode.init(6)}}
    root1 = %TreeNode{root1 | right: %TreeNode{root1.right | right: TreeNode.init(9)}}
    root1 = %TreeNode{root1 | left: %TreeNode{root1.left | left: TreeNode.init(4)}}
    root1 = %TreeNode{root1 | left: %TreeNode{root1.left | right: TreeNode.init(5)}}

    inner_left = %TreeNode{root1.left.right | left: TreeNode.init(7)}
    root1 = %TreeNode{root1 | left: %TreeNode{root1.left | right: inner_left}}
    inner_right = %TreeNode{root1.left.right | right: TreeNode.init(8)}
    root1 = %TreeNode{root1 | left: %TreeNode{root1.left | right: inner_right}}

    root2 = TreeNode.init(1)
    root2 = %TreeNode{root2 | left: TreeNode.init(3)}
    root2 = %TreeNode{root2 | right: TreeNode.init(2)}
    root2 = %TreeNode{root2 | left: %TreeNode{root2.left | right: TreeNode.init(6)}}
    root2 = %TreeNode{root2 | left: %TreeNode{root2.left | left: TreeNode.init(9)}}
    root2 = %TreeNode{root2 | right: %TreeNode{root2.right | left: TreeNode.init(4)}}
    root2 = %TreeNode{root2 | right: %TreeNode{root2.right | right: TreeNode.init(5)}}

    inner_right = %TreeNode{root2.right.right | right: TreeNode.init(7)}
    root2 = %TreeNode{root2 | right: %TreeNode{root2.right | right: inner_right}}
    inner_left = %TreeNode{root2.right.right | left: TreeNode.init(8)}
    root2 = %TreeNode{root2 | right: %TreeNode{root2.right | right: inner_left}}

    IO.inspect Trees.flip_equiv(root1, root2)

    # Example 3
    root3 = TreeNode.init(1)
    root3 = %TreeNode{root3 | right: TreeNode.init(4)}
    root3 = %TreeNode{root3 | left: TreeNode.init(3)}

    root4 = TreeNode.init(1)

    IO.inspect Trees.flip_equiv(root3, root4)
  end
end