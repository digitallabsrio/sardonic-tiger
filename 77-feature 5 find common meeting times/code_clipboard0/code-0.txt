defmodule Meetings do
  def find_overlapping_intervals(meetings_a, meetings_b, intersection, i, j) do
    cond do
      i < Arrays.size(meetings_a) and j < Arrays.size(meetings_b) ->

        start = max((meetings_a[i])[0], (meetings_b[j])[0])
        end_var = min((meetings_a[i])[1], (meetings_b[j])[1])

        intersection =
        cond do
          start < end_var ->
            [[start, end_var] | intersection]
          true -> intersection
        end

        cond do
          (meetings_a[i])[1] < (meetings_b[j])[1] ->
            find_overlapping_intervals(meetings_a, meetings_b, intersection, i+1, j)
          true ->
            find_overlapping_intervals(meetings_a, meetings_b, intersection, i, j+1)
        end

      true -> intersection 
    end
  end

  def meetings_intersection(meetings_a, meetings_b) do
    intersection = []
    i = j = 0

    find_overlapping_intervals(meetings_a, meetings_b, intersection, i, j)
    |> :lists.reverse
  end
end

# Driver code
IO.puts "-----------------------------"
IO.puts "PROGRAM OUTPUT:"

meetings_a = Arrays.new([
  Arrays.new([1, 3]), 
  Arrays.new([5, 6]), 
  Arrays.new([7, 9])
])

meetings_b = Arrays.new([
  Arrays.new([2, 3]), 
  Arrays.new([5, 7])
])

IO.inspect(Meetings.meetings_intersection(meetings_a, meetings_b), charlists: :as_lists)