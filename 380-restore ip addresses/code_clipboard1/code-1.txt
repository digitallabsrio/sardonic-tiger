defmodule Solution do
  def valid(_segment, m) when m > 3, do: false
  def valid(_segment, m) when m <= 0, do: false
  def valid(segment, m), do: if String.at(segment, 0) != "0", do: String.to_integer(segment) <= 255, else: m == 1
  def valid(segment) do
    # Check if the current segment is valid for either 
    # one of following conditions:
    # 1. Check if the current segment is less or equal to 255.  
    # 2. Check if the length of segment is 1. the first character of segment 
    # can be `0` only if length of segment is 1.
    m = byte_size(segment)
    valid(segment, m)
  end

  def check_valid(segments, result, segment) do
    cond do
      !valid(segment) -> {result, segments}
      true ->
        segments = segments |> Arrays.append(segment)
        ip = segments |> Enum.join(".")

        result = result |> Arrays.append(ip)
        {:ok, {_, segments}} = segments |> Arrays.extract

        {result, segments}
    end
  end

  def update_segment(s, curr_pos, segments, result) do
    # update_segment will append the current list of segments 
    # to the list of result.
    segment = String.slice(s, curr_pos+1, String.length(s) - curr_pos - 1)
    check_valid(segments, result, segment)
  end

  def backtrack(s, prev_pos, dots, segments, result) do
    # prev_pos : the position of the previously placed dot
    # dots : number of dots to place

    # The current dot curr_pos could be placed 
    # in a range from prev_pos + 1 to prev_pos + 4.
    # The dot couldnt be placed 
    # after the last character in the string.
    size = byte_size(s)
    max_pos = min(size - 1, prev_pos + 4)
    prev_pos+1..max_pos-1 
    |> Enum.reduce({result, segments}, fn(curr_pos, {result, segments}) ->
      segment = String.slice(s, prev_pos+1, curr_pos - prev_pos)
      cond do
        valid(segment) ->
          segments = segments |> Arrays.append(segment) # place dot
          # if all 3 dots are placed
          {result, segments} = 
            cond do
              dots - 1 == 0 -> update_segment(s, curr_pos, segments, result) # add the solution to output
              true -> backtrack(s, curr_pos, dots - 1, segments, result)  # continue to place dots
            end

          {:ok, {_, segments}} = segments |> Arrays.extract
          {result, segments}

        true -> {result, segments}
      end      
    end)
  end

  def restore_ip_addresses(s) do
    result = Arrays.new([])
    segments = Arrays.new([])
    backtrack(s, -1, 3, segments, result) |> elem(0) |> Arrays.to_list
  end
end

# Driver Code
IO.puts "-----------------------------"
IO.puts "PROGRAM OUTPUT:"

# Example - 1 
str = "0000"
result = Solution.restore_ip_addresses(str)
IO.puts "Possible Ip Addresses: #{inspect result}"

# Example - 2
str = "25525511135"
result = Solution.restore_ip_addresses(str)
IO.puts "Possible Ip Addresses: #{inspect result}"

# Example - 3
str = "12121212"
result = Solution.restore_ip_addresses(str)
IO.puts "Possible Ip Addresses: #{inspect result}"