defmodule Schedule do
    def length_of_longest_busy_period(schedule) do
        slot_set = MapSet.new(schedule)

        slot_set
        |> Enum.reduce(0, fn (slot, longest_busy_period) ->
            if MapSet.member?(slot_set, slot-1) do
                longest_busy_period
            else 
                current_slot = slot
                current_consecutive_slot = 1
                length_of_longest_busy_period(current_slot, slot_set, current_consecutive_slot, longest_busy_period)
            end
        end)
    end

    def length_of_longest_busy_period(current_slot, slot_set, current_consecutive_slot, longest_busy_period) do
        if MapSet.member?(slot_set, current_slot+1) do
            length_of_longest_busy_period(current_slot+1, slot_set, current_consecutive_slot+1, longest_busy_period)
        else
            if current_consecutive_slot > longest_busy_period do
                current_consecutive_slot
            else
                longest_busy_period
            end
        end
    end
end
  
# Driver Code
IO.puts "-----------------------------"
IO.puts "PROGRAM OUTPUT:"
IO.inspect Schedule.length_of_longest_busy_period([3, 1, 15, 5, 2, 12, 10, 4, 8, 9])