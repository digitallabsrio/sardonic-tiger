defmodule Solution do
  use Bitwise

  def applying_mask(mask, data_ith, number_of_bytes_to_process) do
    cond do
      (mask &&& data_ith) != 0 -> applying_mask(mask >>> 1, data_ith, number_of_bytes_to_process+1)
      true -> number_of_bytes_to_process
    end
  end

  def validate_packet_structure(data, number_of_bytes_to_process, res, mask1, mask2) do
    data
    |> Enum.reduce_while({res, number_of_bytes_to_process}, fn(data_ith, {res, number_of_bytes_to_process}) ->
      cond do
        # If this is the case then we are to start processing a new packet.
        number_of_bytes_to_process == 0 ->
          mask = 1 <<< 7
          number_of_bytes_to_process = applying_mask(mask, data_ith, number_of_bytes_to_process)

          cond do
            # 1 byte packets
            number_of_bytes_to_process == 0 -> {:cont, {res, number_of_bytes_to_process}}
            true ->
              case number_of_bytes_to_process do
                # Invalid scenarios according to the rules of the problem.
                n when n > 4 or n == 1 -> {:halt, {false, number_of_bytes_to_process}}
                _ -> {:cont, {res, number_of_bytes_to_process - 1}} 
              end
          end

        true ->
          # data[i] should have most significant bit set and
          # second most significant bit unset. So, we use the two masks
          # to make sure this is the case.
          cond do
            !((data_ith &&& mask1) != 0 and (mask2 &&& data_ith) == 0) -> {:halt, {false, number_of_bytes_to_process}}
            true -> {:cont, {res, number_of_bytes_to_process - 1}}
          end
      end
    end)
  end

  def validate_packet_structure(data) do
    # Number of bytes in the current packet
    number_of_bytes_to_process = 0

    # Masks to check two most significant bits in a byte.
    mask1 = 1 <<< 7
    mask2 = 1 <<< 6

    # For each integer in the data array.
    {res, number_of_bytes_to_process} = validate_packet_structure(data, number_of_bytes_to_process, true, mask1, mask2)
    
    # This is for the case where we might not have the complete data for
    # a particular packet.
    if res == false, do: false, else: number_of_bytes_to_process == 0
  end
end

# Driver code
IO.puts "-----------------------------"
IO.puts "PROGRAM OUTPUT:"

# Example - 1
data = [193, 129, 3]
IO.inspect Solution.validate_packet_structure(data)

# Example - 2
data = [230, 129, 7]
IO.inspect Solution.validate_packet_structure(data)

# Example - 3
data = [248, 129, 129, 129, 129]
IO.inspect Solution.validate_packet_structure(data)