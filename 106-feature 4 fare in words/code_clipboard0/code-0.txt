defmodule Fare do
  def ones(fare) do
    case fare do
      1 -> "One"
      2 -> "Two"
      3 -> "Three"
      4 -> "Four"
      5 -> "Five"
      6 -> "Six"
      7 -> "Seven"
      8 -> "Eight"
      9 -> "Nine"
    end
  end

  defp teens(fare) do
    case fare do
      10 -> "Ten"
      11 -> "Eleven"
      12 -> "Twelve"
      13 -> "Thirteen"
      14 -> "Fourteen"
      15 -> "Fifteen"
      16 -> "Sixteen"
      17 -> "Seventeen"
      18 -> "Eighteen"
      19 -> "Nineteen"
   end
  end
  
  defp tens(fare) do
    case fare do
      2 -> "Twenty"
      3 -> "Thirty"
      4 -> "Forty"
      5 -> "Fifty"
      6 -> "Sixty"
      7 -> "Seventy"
      8 -> "Eighty"
      9 -> "Ninety"
    end
  end

  defp two(fare) do
    cond do
      fare <= 0 -> ""
      fare < 10 -> ones(fare)
      fare < 20 -> teens(fare)
      true ->
        tenner = div(fare, 10)
        rest = fare - tenner * 10
        if rest != 0, do: tens(tenner) <> " " <> ones(rest), else: tens(tenner)
    end
  end

  defp three(fare) do
    hundred = div(fare, 100)
    rest = fare - hundred * 100

    cond do
      hundred * rest != 0 -> ones(hundred) <> " Hundred " <> two(rest)
      (hundred == 0) and (rest != 0) -> two(rest)
      (hundred != 0) and (rest == 0) -> ones(rest) <> " Hundred"
      true -> ""
    end
  end

  def fare_in_words(result, value, _flag) when value == 0, do: result
  def fare_in_words(result, value, flag) do
    result = if byte_size(result) == 0, do: "", else: result <> " "

    cond do
      flag == :million -> result <> three(value) <> " Million"
      flag == :thousand -> result <> three(value) <> " Thousand"
      flag == :rest -> result <> three(value)
      true -> result
    end
  end

  def fare_in_words(fare) when fare == 0, do: "Zero"
  def fare_in_words(fare) do
    billion = div(fare, 1000000000)
    million = div((fare - billion * 1000000000), 1000000)
    thousand = div((fare - billion * 1000000000 - million * 1000000), 1000)
    rest = fare - billion * 1000000000 - million * 1000000 - thousand * 1000

    result = ""    
    result = if billion != 0, do: three(billion)  <> " Billion", else: result
    result = fare_in_words(result, million, :million)
    result = fare_in_words(result, thousand, :thousand)
    fare_in_words(result, rest, :rest)
  end
end    
    
# Driver code
IO.puts "-----------------------------"
IO.puts "PROGRAM OUTPUT:"

fare = 5648
IO.puts "The fare is: #{Fare.fare_in_words(fare)} dollars"