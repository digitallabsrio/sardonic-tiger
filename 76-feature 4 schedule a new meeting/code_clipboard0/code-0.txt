defmodule Meetings do
  def insert_meeting(meeting_times, new_meeting) do
    meeting_times = 
      meeting_times
      |> Enum.sort
      |> Arrays.new
    
    [new_start, new_end] =  new_meeting
    i = 0
    n = Arrays.size(meeting_times)
    output = Arrays.new([])

    {output, i} = add_meetings(meeting_times, new_start, output, n, i)

    output = 
      cond do
        Arrays.size(output) == 0 or Arrays.new(output[-1])[1] < new_start ->
          output |> Arrays.append(new_meeting)
        true ->
          inner_list = output[-1]
          value = Arrays.new(output[-1])[1]
          replaced_list = List.replace_at(inner_list, 1, max(value, new_end))
          Arrays.replace(output, -1, replaced_list)
      end

    add_remaining_meetings(meeting_times, output, i, n) 
    |> Arrays.to_list
  end
  
  defp add_meetings(meeting_times, new_start, output, n, i) do
    cond do
      i < n and new_start > hd(meeting_times[i]) ->

        output = output |> Arrays.append(meeting_times[i])
        add_meetings(meeting_times, new_start, output, n, i+1)
 
      true -> {output, i}
    end
  end

  defp add_remaining_meetings(meeting_times, output, i, n) do
    cond do
      i < n ->
        meeting = meeting_times[i]
        [start, end_var] = meeting

        output = 
          cond do
            Arrays.new(output[-1])[1] < start -> output |> Arrays.append(meeting)
            true ->
              inner_list = output[-1]
              value = Arrays.new(output[-1])[1]
              replaced_list = List.replace_at(inner_list, 1, max(value, end_var))
              Arrays.replace(output, -1, replaced_list)
          end

      add_remaining_meetings(meeting_times, output, i+1, n)

      true -> output
    end
  end
end
           
# Driver code
IO.puts "-----------------------------"
IO.puts "PROGRAM OUTPUT:"

meeting_times = [[1, 3], [4, 6], [8, 10], [10, 12], [13, 15], [16, 18]]
new_meeting = [9, 13]
IO.inspect Meetings.insert_meeting(meeting_times, new_meeting)