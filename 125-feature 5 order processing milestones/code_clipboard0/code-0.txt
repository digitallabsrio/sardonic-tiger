defmodule Orders do
  defp binary_search(_milestones, _n, first, last) when first >= last, do: first
  defp binary_search(milestones, n, first, last) do
    mid = div(first + last, 2)
    cond do
      milestones[mid] >= n -> binary_search(milestones, n, first, mid)
      true -> binary_search(milestones, n, mid+1, last)
    end
  end

  def search(milestones, n) do
    first = 0 
    last = Arrays.size(milestones)
    binary_search(milestones, n, first, last)
  end
  
  def milestone_days(milestones, target) do
    first_day = search(milestones, target)
    cond do
      target == milestones[first_day] ->
        last_day = search(milestones, target + 1) - 1
        [first_day, last_day]
      true -> [-1, -1]
    end
  end
end

## Driver code
IO.puts "-----------------------------"
IO.puts "PROGRAM OUTPUT:"

milestones = Arrays.new([0, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 6, 7])
target = 4
IO.inspect Orders.milestone_days(milestones, target), charlists: :as_lists