defmodule Location do

  defstruct x: 0, y: 0
  def init(x, y), do: %Location{x: x, y: y}

  # used for max-heap
  def compare(a, b) do
    case {a, b} do
      {first, second} when first > second -> true
      {first, second} when first < second -> false
      _ -> false
    end
  end

  def distance_from_user(obj) do
    # ignoring sqrt to calculate the distance
    (obj.x * obj.x) + (obj.y * obj.y)
  end

  def print_location(obj) do
    IO.puts "[ #{elem(obj, 1).x}, #{elem(obj, 1).y}]"
  end
end

defmodule Drivers do
  def find_closest_drivers(locations, k) do
    size = length(locations)
    max_heap = Heap.new(&(Location.compare(elem(&1, 0), elem(&2, 0))))

    # put first 'k' locations in the max heap
    max_heap =
      locations
      |> Enum.reduce_while({max_heap, 0}, fn(val, {max_heap, i}) ->
        cond do
          i == k -> {:halt, {max_heap, i}} 
          true ->
            max_heap = max_heap |> Heap.push({Location.distance_from_user(val), val})
            {:cont, {max_heap, i+1}}
        end
      end)
      |> elem(0)

    # go through the remaining locations of the input array, if a point is closer to the origin than the top point
    # of the max-heap, remove the top point from heap and add the point from the input array
    Enum.slice(locations, k, length(locations)-1)
    |> Enum.reduce_while({max_heap, k}, fn(val, {max_heap, i}) ->
      cond do
        i == size -> {:halt, {max_heap, i}} 
        true -> 
          {distance, _} = Heap.root(max_heap)

          cond do
            Location.distance_from_user(val) < distance ->
              max_heap = max_heap |> Heap.pop
              max_heap = max_heap |> Heap.push({Location.distance_from_user(val), val})
              {:cont, {max_heap, i+1}}

            true -> {:cont, {max_heap, i+1}}
          end
      end
    end)
    |> elem(0)
    # the heap has 'k' locations closest to the origin, return them in a list
    |> Enum.to_list
  end
end

# Driver Code
IO.puts "-----------------------------"
IO.puts "PROGRAM OUTPUT:"

result = Drivers.find_closest_drivers([Location.init(1, 3), Location.init(3, 4), Location.init(2, -1)], 2)
IO.puts "Here are the k drivers locations closest to the user in the Seattle area: "

result 
|> Enum.map(fn location ->
  location |> Location.print_location
end)